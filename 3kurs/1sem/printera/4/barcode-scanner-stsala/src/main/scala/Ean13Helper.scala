object Ean13Helper {
    
    private val ean13LeftValues = Map(
        //a
        ("0001101", "0"),
        ("0110001", "1"),
        ("0010011", "2"),
        ("0111101", "3"),
        ("0100011", "4"),
        ("0110001", "5"),
        ("0101111", "6"),
        ("0111011", "7"),
        ("0110111", "8"),
        ("0001011", "9"),
        
        //b
        ("0100111", "0"),
        ("0110011", "1"),
        ("0011011", "2"),
        ("0100001", "3"),
        ("0011101", "4"),
        ("0111001", "5"),
        ("0000101", "6"),
        ("0010001", "7"),
        ("0001001", "8"),
        ("0010111", "9")
    )
    
    private val ean13RightValues = Map(
        //c
        ("1110010", "0"),
        ("1100110", "1"),
        ("1101100", "2"),
        ("1000010", "3"),
        ("1011100", "4"),
        ("1001110", "5"),
        ("1010000", "6"),
        ("1000100", "7"),
        ("1001000", "8"),
        ("1110100", "9")
    )
    
    private val ean13FirstDigit = Map(
        ("000000", "0"),
        ("001011", "1"),
        ("001101", "2"),
        ("001110", "3"),
        ("010011", "4"),
        ("011001", "5"),
        ("011100", "6"),
        ("010101", "7"),
        ("010110", "8"),
        ("011010", "9")
    )
    
    def getLeftNumber(number: String): String = ean13LeftValues.getOrElse(number, " ")
    
    def getFirstNumber(number: String): String = ean13FirstDigit.getOrElse(number, " ")
    
    def getRightNumber(number: String): String = ean13RightValues.getOrElse(number, " ")
}
